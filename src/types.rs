//! Qwen API Types
//!
//! This module defines the types used in the Qwen API client.

use serde::{Deserialize, Serialize};

/// MessageRole defines the role of the message sender.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum MessageRole {
    System,
    Developer,
    User,
    Assistant,
    Function,
    Tool,
}

/// ChatMessage represents a single message in a chat conversation.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChatMessage {
    pub role: MessageRole,
    pub content: serde_json::Value, // Can be string or array of ContentBlock
    #[serde(rename = "tool_calls", skip_serializing_if = "Option::is_none")]
    pub tool_calls: Option<Vec<ToolCall>>,
}

/// ToolParameter defines the structure for a parameter within a tool's function.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ToolParameter {
    #[serde(rename = "type")]
    pub r#type: String,
    pub description: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
}

/// Tool defines the structure for a tool that can be called by the model.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Tool {
    pub name: String,
    pub description: String,
    pub parameters: std::collections::HashMap<String, ToolParameter>,
}

/// FunctionCall represents the function call generated by the model.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FunctionCall {
    pub name: String,
    pub arguments: std::collections::HashMap<String, serde_json::Value>,
}

/// ToolCall represents a single tool call in the response message.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ToolCall {
    pub id: String,
    #[serde(rename = "type")]
    pub r#type: String, // Should be "function"
    pub function: FunctionCall,
}

/// TextBlock represents a text content block.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TextBlock {
    #[serde(rename = "type")]
    pub r#type: String, // Should be "text"
    pub text: String,
}

/// ImageBlock represents an image content block.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImageBlock {
    #[serde(rename = "type")]
    pub r#type: String, // Should be "image"
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<String>, // base64 encoded image
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "image_mimetype", skip_serializing_if = "Option::is_none")]
    pub mime_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
}

/// AudioBlock represents an audio content block.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AudioBlock {
    #[serde(rename = "type")]
    pub r#type: String, // Should be "audio"
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio: Option<String>, // base64 encoded audio
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
}

/// ContentBlock is a flexible type to hold different content blocks.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContentBlock {
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(flatten)]
    pub data: std::collections::HashMap<String, serde_json::Value>,
}

/// InternalPayloadContentBlock represents a content block as sent in the API payload.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InternalPayloadContentBlock {
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<String>, // URL for image
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio: Option<String>, // URL for audio
}

/// InternalPayloadMessage represents a message as sent in the API payload.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InternalPayloadMessage {
    pub role: MessageRole,
    pub content: serde_json::Value, // Can be string or array of InternalPayloadContentBlock
    #[serde(rename = "chat_type")]
    pub chat_type: String,
    #[serde(rename = "feature_config")]
    pub feature_config: FeatureConfig,
    pub extra: std::collections::HashMap<String, serde_json::Value>,
}

/// FeatureConfig represents the feature configuration for a message.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FeatureConfig {
    #[serde(rename = "thinking_enabled")]
    pub thinking_enabled: bool,
    #[serde(rename = "thinking_budget")]
    pub thinking_budget: i32,
    #[serde(rename = "output_schema")]
    pub output_schema: Option<serde_json::Value>, // null in TS
}

/// Delta represents the incremental content in a streaming chat completion.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Delta {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<MessageRole>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "tool_calls", skip_serializing_if = "Option::is_none")]
    pub tool_calls: Option<Vec<ToolCall>>,
}

/// ChoiceStream represents a single choice in a streaming chat completion response.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChoiceStream {
    pub delta: Delta,
}

/// ChatResponseStream defines the response payload for streaming chat completions.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChatResponseStream {
    pub choices: Vec<ChoiceStream>,
}

/// STSRequest defines the request payload for getting STS token.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct STSRequest {
    pub filename: String,
    pub filesize: i64,
    pub filetype: String,
}

/// STSResponse defines the response payload for STS token.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct STSResponse {
    #[serde(rename = "access_key_id")]
    pub access_key_id: String,
    #[serde(rename = "access_key_secret")]
    pub access_key_secret: String,
    #[serde(rename = "security_token")]
    pub security_token: String,
    pub region: String,
    #[serde(rename = "bucketname")]
    pub bucket_name: String,
    #[serde(rename = "file_path")]
    pub file_path: String,
    #[serde(rename = "file_url")]
    pub file_url: String,
    #[serde(rename = "file_id")]
    pub file_id: String,
}

/// ChatCompletionRequest defines the request payload for chat completions.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChatCompletionRequest {
    pub messages: Vec<ChatMessage>,
    pub model: String,
    pub temperature: Option<f64>,
    pub max_tokens: Option<i32>,
    pub stream: bool,
    #[serde(skip_serializing_if = "Vec::is_empty", default)]
    pub tools: Vec<Tool>,
}

/// Choice represents a single choice in a chat completion response.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Choice {
    pub message: ChatMessage,
}

/// ChatResponse defines the response payload for non-streaming chat completions.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChatResponse {
    pub choices: Vec<Choice>,
}
