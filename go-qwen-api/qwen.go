package qwen

import "encoding/json"

// MessageRole defines the role of the message sender.
type MessageRole string

const (
	MessageRoleSystem    MessageRole = "system"
	MessageRoleDeveloper MessageRole = "developer"
	MessageRoleUser      MessageRole = "user"
	MessageRoleAssistant MessageRole = "assistant"
	MessageRoleFunction  MessageRole = "function"
	MessageRoleTool      MessageRole = "tool"
	MessageRoleChatbot   MessageRole = "chatbot"
	MessageRoleModel     MessageRole = "model"
)

// ToolParameter defines the structure for a parameter within a tool's function.
type ToolParameter struct {
	Type        string `json:"type"`
	Description string `json:"description"`
	Required    bool   `json:"required,omitempty"`
}

// Tool defines the structure for a tool that can be called by the model.
type Tool struct {
	Name        string                   `json:"name"`
	Description string                   `json:"description"`
	Parameters  map[string]ToolParameter `json:"parameters"`
}

// FunctionCall represents the function call generated by the model.
type FunctionCall struct {
	Name      string                 `json:"name"`
	Arguments map[string]interface{} `json:"arguments"`
}

// ToolCall represents a single tool call in the response message.
type ToolCall struct {
	ID       string       `json:"id"`
	Type     string       `json:"type"` // Should be "function"
	Function FunctionCall `json:"function"`
}

// TextBlock represents a text content block.
type TextBlock struct {
	BlockType string `json:"type"` // Should be "text"
	Text      string `json:"text"`
}

// ImageBlock represents an image content block.
type ImageBlock struct {
	BlockType string `json:"type"`            // Should be "image"
	Image     string `json:"image,omitempty"` // base64 encoded image
	Path      string `json:"path,omitempty"`
	URL       string `json:"url,omitempty"`
	MimeType  string `json:"image_mimetype,omitempty"`
	Detail    string `json:"detail,omitempty"`
}

// AudioBlock represents an audio content block.
type AudioBlock struct {
	BlockType string `json:"type"`            // Should be "audio"
	Audio     string `json:"audio,omitempty"` // base64 encoded audio
	Path      string `json:"path,omitempty"`
	URL       string `json:"url,omitempty"`
	Format    string `json:"format,omitempty"`
}

// ContentBlock is a flexible type to hold different content blocks.
// It uses json.RawMessage to defer parsing until the type is known.
type ContentBlock struct {
	BlockType string          `json:"type"`
	Raw       json.RawMessage `json:"-"` // Store raw JSON for custom unmarshaling
}

// UnmarshalJSON implements the json.Unmarshaler interface for ContentBlock.
func (cb *ContentBlock) UnmarshalJSON(data []byte) error {
	// First, unmarshal to a temporary struct to get the BlockType
	var temp struct {
		BlockType string `json:"type"`
	}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	cb.BlockType = temp.BlockType
	cb.Raw = data // Store the raw JSON for later specific unmarshaling

	return nil
}

// ChatMessage represents a single message in a chat conversation.
type ChatMessage struct {
	Role      MessageRole     `json:"role"`
	Content   json.RawMessage `json:"content,omitempty"` // Can be string or array of ContentBlock
	ToolCalls []ToolCall      `json:"tool_calls,omitempty"`
}

// InternalPayloadContentBlock represents a content block as sent in the API payload.
type InternalPayloadContentBlock struct {
	Type  string `json:"type"`
	Text  string `json:"text,omitempty"`
	Image string `json:"image,omitempty"` // URL for image
	Audio string `json:"audio,omitempty"` // URL for audio
}

// InternalPayloadMessage represents a message as sent in the API payload.
type InternalPayloadMessage struct {
	Role          MessageRole `json:"role"`
	Content       interface{} `json:"content"` // Can be string or []InternalPayloadContentBlock
	ChatType      string      `json:"chat_type"`
	FeatureConfig struct {
		ThinkingEnabled bool        `json:"thinking_enabled"`
		ThinkingBudget  int         `json:"thinking_budget"`
		OutputSchema    interface{} `json:"output_schema"` // null in TS
	} `json:"feature_config"`
	Extra map[string]interface{} `json:"extra"`
}

// ChatCompletionRequest defines the request payload for chat completions.
type ChatCompletionRequest struct {
	Messages    []ChatMessage `json:"messages"`
	Model       string        `json:"model"`
	Temperature *float64      `json:"temperature,omitempty"`
	MaxTokens   *int          `json:"max_tokens,omitempty"`
	Stream      bool          `json:"stream,omitempty"`
	Tools       []Tool        `json:"tools,omitempty"`
}

// Choice represents a single choice in a chat completion response.
type Choice struct {
	Message ChatMessage `json:"message"`
}

// ChatResponse defines the response payload for non-streaming chat completions.
type ChatResponse struct {
	Choices []Choice `json:"choices"`
}

// Delta represents the incremental content in a streaming chat completion.
type Delta struct {
	Role      MessageRole `json:"role,omitempty"`
	Content   string      `json:"content,omitempty"`
	ToolCalls []ToolCall  `json:"tool_calls,omitempty"`
}

// ChoiceStream represents a single choice in a streaming chat completion response.
type ChoiceStream struct {
	Delta Delta `json:"delta"`
}

// ChatResponseStream defines the response payload for streaming chat completions.
type ChatResponseStream struct {
	Choices []ChoiceStream `json:"choices"`
}

// STSRequest defines the request payload for getting STS token.
type STSRequest struct {
	Filename string `json:"filename"`
	Filesize int64  `json:"filesize"`
	Filetype string `json:"filetype"`
}

// STSResponse defines the response payload for STS token.
type STSResponse struct {
	AccessKeyID     string `json:"access_key_id"`
	AccessKeySecret string `json:"access_key_secret"`
	SecurityToken   string `json:"security_token"`
	Region          string `json:"region"`
	BucketName      string `json:"bucketname"`
	FilePath        string `json:"file_path"`
	FileUrl         string `json:"file_url"`
	FileID          string `json:"file_id"`
}
